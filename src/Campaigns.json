{"articles" : [
    {
        "author": "Karthik",
        "dp": "https://images.unsplash.com/photo-1570295999919-56ceb5ecca61?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1400&q=80",
        "banner": "https://miro.medium.com/max/620/0*smqAD9zV22Zq4OGk",
        "title": "Fusion: More of Impossible Is Possible!",
        "content": "This is a short overview of features added to Fusion over the last 3 months. Some of them are already covered in the Tutorial; I‚Äôll definitely describe the rest soon.CommandR (which challenges MediatR üòé) and Operations Framework ‚Äî two parts that make multi-host state sync possible. Yes, now you can scale Fusion services to multiple hosts, and it‚Äôs nearly as easy as for any other service. Check out how it works on this animation. For the note, both components actually aren‚Äôt tied to Fusion, so you can use them for purposes other than distributed invalidation. Board Games ‚Äî the most advanced Fusion sample so far. Play intro video there to see what it can do. Blazor Server and WASM modes, 2 games, chat, online presence, OAuth sign-in, user session tracking, and a number of other 100% real-time features. All of this is powered by Fusion and just 35 lines of code related to real-time updates! HelloCart sample ‚Äîprobably the most interesting one for newcomers. It shows how to go from a very basic Fusion service to a Fusion-powered web API persisting the data via EF Core and capable of running on multiple hosts. Why it‚Äôs good: it implemented the same API declared in Abstractions.cs in 4 different ways (see v1‚Ä¶v4 folders) with gradually increasing complexity and use of Fusion features. The sample isn‚Äôt documented yet ‚Äî that‚Äôs my #1 priority now. Refactorings ‚Äî most are related to CommandR / Operations Framework, but notably, LiveComponentBase (the base type for Fusion-aware UI components) became much more user-friendly too. Lots of fixes, though nothing extremely bad. If you‚Äôre a true .NET nerd, here is the question influenced by arguably the hardest-to-find issue so far. The example code looks simple (well, that‚Äôs the simplest illustration of the same root cause I could come up with), but the underlying issue was much more complex. Videos & materials from recent events (don‚Äôt be shy ‚Äî share them!): My talk about Fusion on LA.NET User Group (slides) A similar talk on .NET Conf Armenia. Growth: 830 stars on GitHub, +500 from my last status update here. P.S. If you want to track project updates in Fusion style (i.e. in real-time) ‚Äî join our Discord, right now I share some news on daily basis there, and it‚Äôs for sure best place for Q/A.",
        "date posted": "Feb 20",
        "min read": 3
    },
    {
        "author": "Neymar",
        "dp": "https://images.unsplash.com/photo-1573140247632-f8fd74997d5c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=750&q=80",
        "publication": "UX Planet",
        "banner": "https://miro.medium.com/max/700/1*ZRwUmHqrBw28drl3c5UUpQ.jpeg",
        "title": "Book Review: Steve Krug‚Äôs ‚ÄúDon‚Äôt Make Me Think, Revisited.‚Äù 4 Key Takeaways",
        "content": "This is a short overview of features added to Fusion over the last 3 months. Some of them are already covered in the Tutorial; I‚Äôll definitely describe the rest soon.CommandR (which challenges MediatR üòé) and Operations Framework ‚Äî two parts that make multi-host state sync possible. Yes, now you can scale Fusion services to multiple hosts, and it‚Äôs nearly as easy as for any other service. Check out how it works on this animation. For the note, both components actually aren‚Äôt tied to Fusion, so you can use them for purposes other than distributed invalidation. Board Games ‚Äî the most advanced Fusion sample so far. Play intro video there to see what it can do. Blazor Server and WASM modes, 2 games, chat, online presence, OAuth sign-in, user session tracking, and a number of other 100% real-time features. All of this is powered by Fusion and just 35 lines of code related to real-time updates! HelloCart sample ‚Äîprobably the most interesting one for newcomers. It shows how to go from a very basic Fusion service to a Fusion-powered web API persisting the data via EF Core and capable of running on multiple hosts. Why it‚Äôs good: it implemented the same API declared in Abstractions.cs in 4 different ways (see v1‚Ä¶v4 folders) with gradually increasing complexity and use of Fusion features. The sample isn‚Äôt documented yet ‚Äî that‚Äôs my #1 priority now. Refactorings ‚Äî most are related to CommandR / Operations Framework, but notably, LiveComponentBase (the base type for Fusion-aware UI components) became much more user-friendly too. Lots of fixes, though nothing extremely bad. If you‚Äôre a true .NET nerd, here is the question influenced by arguably the hardest-to-find issue so far. The example code looks simple (well, that‚Äôs the simplest illustration of the same root cause I could come up with), but the underlying issue was much more complex. Videos & materials from recent events (don‚Äôt be shy ‚Äî share them!): My talk about Fusion on LA.NET User Group (slides) A similar talk on .NET Conf Armenia. Growth: 830 stars on GitHub, +500 from my last status update here. P.S. If you want to track project updates in Fusion style (i.e. in real-time) ‚Äî join our Discord, right now I share some news on daily basis there, and it‚Äôs for sure best place for Q/A.",
        "date posted": "Feb 24",
        "min read": 4
    },
    {
        "author": "Aravind",
        "dp": "https://images.unsplash.com/photo-1593104547489-5cfb3839a3b5?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=736&q=80",
        "publication": "Flutter Community",
        "banner": "https://miro.medium.com/max/700/1*tqMdDb-6cKY3MGKuEd1jDQ.png",
        "title": "Shadows and Neumorphism in Flutter",
        "content": "This is a short overview of features added to Fusion over the last 3 months. Some of them are already covered in the Tutorial; I‚Äôll definitely describe the rest soon.CommandR (which challenges MediatR üòé) and Operations Framework ‚Äî two parts that make multi-host state sync possible. Yes, now you can scale Fusion services to multiple hosts, and it‚Äôs nearly as easy as for any other service. Check out how it works on this animation. For the note, both components actually aren‚Äôt tied to Fusion, so you can use them for purposes other than distributed invalidation. Board Games ‚Äî the most advanced Fusion sample so far. Play intro video there to see what it can do. Blazor Server and WASM modes, 2 games, chat, online presence, OAuth sign-in, user session tracking, and a number of other 100% real-time features. All of this is powered by Fusion and just 35 lines of code related to real-time updates! HelloCart sample ‚Äîprobably the most interesting one for newcomers. It shows how to go from a very basic Fusion service to a Fusion-powered web API persisting the data via EF Core and capable of running on multiple hosts. Why it‚Äôs good: it implemented the same API declared in Abstractions.cs in 4 different ways (see v1‚Ä¶v4 folders) with gradually increasing complexity and use of Fusion features. The sample isn‚Äôt documented yet ‚Äî that‚Äôs my #1 priority now. Refactorings ‚Äî most are related to CommandR / Operations Framework, but notably, LiveComponentBase (the base type for Fusion-aware UI components) became much more user-friendly too. Lots of fixes, though nothing extremely bad. If you‚Äôre a true .NET nerd, here is the question influenced by arguably the hardest-to-find issue so far. The example code looks simple (well, that‚Äôs the simplest illustration of the same root cause I could come up with), but the underlying issue was much more complex. Videos & materials from recent events (don‚Äôt be shy ‚Äî share them!): My talk about Fusion on LA.NET User Group (slides) A similar talk on .NET Conf Armenia. Growth: 830 stars on GitHub, +500 from my last status update here. P.S. If you want to track project updates in Fusion style (i.e. in real-time) ‚Äî join our Discord, right now I share some news on daily basis there, and it‚Äôs for sure best place for Q/A.",
        "date posted": "Feb 20",
        "min read": 5
    },
    {
        "author": "Cristiano",
        "dp": "https://images.unsplash.com/photo-1595868228899-abc8fabb3447?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=750&q=80",
        "publication": "Better Programming",
        "banner": "https://miro.medium.com/max/700/1*CoNz_pH3uVmfi1a8WbG2oQ.png",
        "title": "Master Mac/Linux Terminal Shortcuts Like a Ninja",
        "content": "This is a short overview of features added to Fusion over the last 3 months. Some of them are already covered in the Tutorial; I‚Äôll definitely describe the rest soon.CommandR (which challenges MediatR üòé) and Operations Framework ‚Äî two parts that make multi-host state sync possible. Yes, now you can scale Fusion services to multiple hosts, and it‚Äôs nearly as easy as for any other service. Check out how it works on this animation. For the note, both components actually aren‚Äôt tied to Fusion, so you can use them for purposes other than distributed invalidation. Board Games ‚Äî the most advanced Fusion sample so far. Play intro video there to see what it can do. Blazor Server and WASM modes, 2 games, chat, online presence, OAuth sign-in, user session tracking, and a number of other 100% real-time features. All of this is powered by Fusion and just 35 lines of code related to real-time updates! HelloCart sample ‚Äîprobably the most interesting one for newcomers. It shows how to go from a very basic Fusion service to a Fusion-powered web API persisting the data via EF Core and capable of running on multiple hosts. Why it‚Äôs good: it implemented the same API declared in Abstractions.cs in 4 different ways (see v1‚Ä¶v4 folders) with gradually increasing complexity and use of Fusion features. The sample isn‚Äôt documented yet ‚Äî that‚Äôs my #1 priority now. Refactorings ‚Äî most are related to CommandR / Operations Framework, but notably, LiveComponentBase (the base type for Fusion-aware UI components) became much more user-friendly too. Lots of fixes, though nothing extremely bad. If you‚Äôre a true .NET nerd, here is the question influenced by arguably the hardest-to-find issue so far. The example code looks simple (well, that‚Äôs the simplest illustration of the same root cause I could come up with), but the underlying issue was much more complex. Videos & materials from recent events (don‚Äôt be shy ‚Äî share them!): My talk about Fusion on LA.NET User Group (slides) A similar talk on .NET Conf Armenia. Growth: 830 stars on GitHub, +500 from my last status update here. P.S. If you want to track project updates in Fusion style (i.e. in real-time) ‚Äî join our Discord, right now I share some news on daily basis there, and it‚Äôs for sure best place for Q/A.",
        "date posted": "Feb 20",
        "min read": 8
    },
    {
        "author": "Ronaldo",
        "dp": "s",
        "publication": "The Startup",
        "banner": "https://miro.medium.com/max/700/1*yztKepBo8EicELoqLKHm2A.jpeg",
        "title": "What Is Work Culture Now?",
        "content": "This is a short overview of features added to Fusion over the last 3 months. Some of them are already covered in the Tutorial; I‚Äôll definitely describe the rest soon.CommandR (which challenges MediatR üòé) and Operations Framework ‚Äî two parts that make multi-host state sync possible. Yes, now you can scale Fusion services to multiple hosts, and it‚Äôs nearly as easy as for any other service. Check out how it works on this animation. For the note, both components actually aren‚Äôt tied to Fusion, so you can use them for purposes other than distributed invalidation. Board Games ‚Äî the most advanced Fusion sample so far. Play intro video there to see what it can do. Blazor Server and WASM modes, 2 games, chat, online presence, OAuth sign-in, user session tracking, and a number of other 100% real-time features. All of this is powered by Fusion and just 35 lines of code related to real-time updates! HelloCart sample ‚Äîprobably the most interesting one for newcomers. It shows how to go from a very basic Fusion service to a Fusion-powered web API persisting the data via EF Core and capable of running on multiple hosts. Why it‚Äôs good: it implemented the same API declared in Abstractions.cs in 4 different ways (see v1‚Ä¶v4 folders) with gradually increasing complexity and use of Fusion features. The sample isn‚Äôt documented yet ‚Äî that‚Äôs my #1 priority now. Refactorings ‚Äî most are related to CommandR / Operations Framework, but notably, LiveComponentBase (the base type for Fusion-aware UI components) became much more user-friendly too. Lots of fixes, though nothing extremely bad. If you‚Äôre a true .NET nerd, here is the question influenced by arguably the hardest-to-find issue so far. The example code looks simple (well, that‚Äôs the simplest illustration of the same root cause I could come up with), but the underlying issue was much more complex. Videos & materials from recent events (don‚Äôt be shy ‚Äî share them!): My talk about Fusion on LA.NET User Group (slides) A similar talk on .NET Conf Armenia. Growth: 830 stars on GitHub, +500 from my last status update here. P.S. If you want to track project updates in Fusion style (i.e. in real-time) ‚Äî join our Discord, right now I share some news on daily basis there, and it‚Äôs for sure best place for Q/A.",
        "date posted": "Feb 20",
        "min read": 7
    }
]}